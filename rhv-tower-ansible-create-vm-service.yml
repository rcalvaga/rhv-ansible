---
- hosts: localhost
  # gather_facts: false
  connection: local

  vars:
    max_retries: 9
    retry_interval: 20

  tasks:
    - debug: var=service_id

    - name: Get CloudForms auth_token
      uri:
        url: "{{ cf_api_uri }}/api/auth"
        method: GET
        validate_certs: no
        user: "{{ cf_user }}"
        password: "{{ cf_pw }}"
        headers:
          accept: "application/json"
        return_content: yes
      register: uri_output
    
    - set_fact: auth_token="{{ uri_output.json.auth_token }}"

    - name: Set the Provider URL
      set_fact:
        provider_url: "{{ cf_api_uri }}/api/providers/{{ provider_id }}"

    - debug: var=provider_url

    - name: Set the Service URL
      set_fact:
        svc_url: "/api/services/{{ service_id }}"

    - debug: var=svc_url

    - name: Obtain SSO token
      ovirt_auth:
        url: "{{ ovirt_url }}"
        insecure: true

    - name: Create VM
      ovirt_vms:
        auth: "{{ ovirt_auth }}"
        state: present
        name: "{{ vm_name }}"
        template: "{{ vm_template }}"
        cluster: "{{ cluster }}"
      register: new_vm

    - name: Revoke SSO token
      ovirt_auth:
        state: absent
        ovirt_auth: "{{ ovirt_auth }}"

    - debug: var=new_vm    

    - set_fact: new_vm_uuid="{{ new_vm.id }}"

    - debug: var=new_vm_uuid

    - name: Refresh provider in CloudForms
      uri:
        url: "{{ provider_url }}"
        method: POST
        body:
          action: refresh
        body_format: json
        validate_certs: False
        headers:
          X-Auth-Token: "{{ auth_token }}"
          Content-Type: "application/json" 
        status_code: 200
      register: output
    - debug: var=output
    - name: set the task href
      set_fact:
        task_url: "{{ output.json.task_href}}"
    - debug: var=task_url

    - name: Wait for the refresh to end
      uri:
        url: "{{ task_url }}"
        method: GET
        validate_certs: False
        headers:
          X-Auth-Token: "{{ auth_token }}"
          Content-Type: "application/json" 
        status_code: 200
      register: task_result
      until: task_result.json.state == 'Finished' or task_result.json.status == 'Error'
      failed_when: task_result.json.status == 'Error'
      retries: "{{max_retries}}"
      delay: "{{retry_interval}}"
    - debug: var=task_result
    
    - set_fact: find_vm_url="{{ cf_api_uri }}/api/vms?expand=resources&attributes=href,uid_ems&filter[]=uid_ems='{{ new_vm_uuid }}'"

    - debug: var=find_vm_url

    - name: Call to CloudForms to find href for new_vm_uuid
      uri:
        url: "{{ find_vm_url }}"
        method: GET
        validate_certs: no
        headers:
           X-Auth-Token: "{{ auth_token }}"
           Content-Type: "application/json"
        body_format: json
        return_content: yes
      register: token_output

    - debug: var=token_output

    - set_fact: cf_vm_href="{{ token_output.json.resources[0].href }}"

    - debug: var=cf_vm_href

    - name: Create an array of vms
      set_fact:
        vms: "{{ vms|default([]) + [ { 'href': svc_url, 'resource':  { 'href': item } } ] }}"
      with_items:
        - "{{ cf_vm_href }}"

    - debug: var=vms
    
    - name: Register vm with the service
      uri:
        url: "{{ cf_api_uri }}/api/services"
        method: POST
        body_format: json
        body:
          action: add_resource
          resources : "{{ vms }}"
        validate_certs: False
        headers:
          X-Auth-Token: "{{ auth_token }}"
          Content-Type: "application/json"
        status_code: 200
      register: output

    - debug: var=output.json.results[0].success
